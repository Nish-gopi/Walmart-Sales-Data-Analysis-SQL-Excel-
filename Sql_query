-- Create database

CREATE DATABASE IF NOT EXISTS walmartSales;

-- Create table

CREATE TABLE IF NOT EXISTS sales(
    invoice_id VARCHAR(30) NOT NULL PRIMARY KEY,
    branch VARCHAR(5) NOT NULL,
    city VARCHAR(30) NOT NULL,
    customer_type VARCHAR(30) NOT NULL,
    gender VARCHAR(30) NOT NULL,
    product_line VARCHAR(100) NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    quantity INT NOT NULL,
    tax_pct FLOAT(6,4) NOT NULL,
    total DECIMAL(12, 4) NOT NULL,
    date DATETIME NOT NULL,
    time TIME NOT NULL,
    payment VARCHAR(15) NOT NULL,
    cogs DECIMAL(10,2) NOT NULL,
    gross_margin_pct FLOAT(11,9),
    gross_income DECIMAL(12, 4),
    rating FLOAT(2, 1)
);

-- 1. Select all columns from the sales table

SELECT * FROM sales;

-- -------------------------------

-- 2. Feature Engineering: Time_of_day
-- Extracting time_of_day from the time column


SELECT time,
    (CASE 
        WHEN time BETWEEN '00:00:00' AND '12:00:00' THEN 'Morning'
        WHEN time BETWEEN '12:01:00' AND '16:00:00' THEN 'Afternoon'
        ELSE 'Evening' 
    END) AS time_of_day 
FROM sales;

-- Adding a new column 'time_of_day' to the sales table
ALTER TABLE sales ADD COLUMN time_of_day VARCHAR(20) NOT NULL;

-- Updating the 'time_of_day' column with the calculated values
UPDATE sales 
SET time_of_day = (CASE 
                        WHEN time BETWEEN '00:00:00' AND '12:00:00' THEN 'Morning'
                        WHEN time BETWEEN '12:01:00' AND '16:00:00' THEN 'Afternoon'
                        ELSE 'Evening' 
                    END);


-- 3. Extracting day_name from the date column

SELECT date,
    DAYNAME(date) AS day_name
FROM sales;

-- Adding a new column 'day_name' to the sales table

ALTER TABLE sales ADD COLUMN day_name VARCHAR(10);

-- Updating the 'day_name' column with the calculated values

UPDATE sales
SET day_name = DAYNAME(date);

-- 4. Extracting month_name from the date column

SELECT date,
    MONTHNAME(date) AS month_name
FROM sales;

-- Adding a new column 'month_name' to the sales table

ALTER TABLE sales ADD COLUMN month_name VARCHAR(10);

-- Updating the 'month_name' column with the calculated values

UPDATE sales
SET month_name = MONTHNAME(date);

-- --------------------------------------------------------------------------------------------------------
-- 5. EDA Analysis: Generic Questions

-- 6. How many unique cities does the data have?

SELECT DISTINCT city FROM sales;

-- 7. In which city is each branch?

SELECT DISTINCT city, branch FROM sales;

-- ----------------------------------------------------------------------------------------------------------
-- 8. Product-related Analysis

-- 9. How many unique product lines does the data have?

SELECT COUNT(DISTINCT product_line) FROM sales;

-- 10. What is the most common payment method?

SELECT payment, COUNT(payment) AS ct_payment 
FROM sales 
GROUP BY payment
ORDER BY ct_payment DESC 
LIMIT 1;

-- 11. What is the most selling product line?

SELECT product_line, COUNT(product_line) AS ct_prod 
FROM sales 
GROUP BY product_line 
ORDER BY ct_prod DESC;

-- 12. What is the total revenue by month?

SELECT month_name AS month, SUM(total) AS total_revenue 
FROM sales 
GROUP BY month_name 
ORDER BY total_revenue DESC;

-- 13. What month had the largest COGS?

SELECT month_name AS month, SUM(cogs) AS largest_cogs 
FROM sales 
GROUP BY month_name 
ORDER BY largest_cogs DESC;

-- 14. What product line had the largest revenue?

SELECT product_line, SUM(total) AS larg_rev 
FROM sales 
GROUP BY product_line 
ORDER BY larg_rev DESC;

-- 15. What is the city with the largest revenue?

SELECT city, branch, SUM(total) AS larg_rev 
FROM sales 
GROUP BY city, branch 
ORDER BY larg_rev DESC;

-- 16. What product line had the largest VAT?

SELECT product_line, AVG(tax_pct) AS avg_tax 
FROM sales 
GROUP BY product_line 
ORDER BY avg_tax DESC;

-- 17. Fetch each product line and add a column showing "Good" or "Bad" based on sales
SELECT product_line, total,
    CASE 
        WHEN total > AVG(total) THEN 'Good'
        ELSE 'Bad'
    END AS prod_value
FROM sales
GROUP BY product_line;

-- 18. Which branch sold more products than the average?

SELECT branch, AVG(quantity) AS avg_qty 
FROM sales 
GROUP BY branch 
HAVING SUM(quantity) > AVG(quantity);

-- 19. What is the most common product line by gender?

SELECT gender, product_line, COUNT(gender) AS ct_gen 
FROM sales 
GROUP BY gender, product_line 
ORDER BY ct_gen DESC;

-- 20. What is the average rating of each product line?

SELECT product_line, ROUND(AVG(rating), 2) AS avg_rating 
FROM sales 
GROUP BY product_line 
ORDER BY avg_rating DESC;

-- ----------------------------------------------------- SALES ----------------------------------------------

-- 21. Number of sales made in each time of the day per weekday (Sunday)

SELECT time_of_day, COUNT(*) AS Total_sales 
FROM sales 
WHERE day_name = 'Sunday' 
GROUP BY time_of_day 
ORDER BY total_sales DESC;

-- 22. Which customer type brings the most revenue?

SELECT customer_type, ROUND(SUM(total), 2) AS revenue 
FROM sales 
GROUP BY customer_type 
ORDER BY revenue DESC;

-- 23. Which city has the largest VAT (Value Added Tax)?

SELECT city, AVG(tax_pct) AS vat 
FROM sales 
GROUP BY city 
ORDER BY vat DESC;

-- 24. Which customer type pays the most in VAT?

SELECT customer_type, AVG(tax_pct) AS VAT 
FROM sales 
GROUP BY customer_type 
ORDER BY VAT DESC;

-- ----------------------------------------------CUSTOMER ----------------------------------------------------

-- 25. How many unique customer types does the data have?

SELECT DISTINCT customer_type FROM sales;

-- 26. How many unique payment methods does the data have?

SELECT DISTINCT Payment FROM sales;

-- 27. What is the most common customer type?

SELECT customer_type, COUNT(customer_type) AS ct_cust 
FROM sales 
GROUP BY customer_type;

-- 28. Which customer type buys the most?

SELECT customer_type, SUM(total) AS sales_, COUNT(*) AS cust_ct 
FROM sales 
GROUP BY customer_type 
ORDER BY cust_ct DESC;

-- 29. What is the gender of most customers?

SELECT gender, COUNT(*) AS gen_ct 
FROM sales 
GROUP BY gender 
ORDER BY gender DESC;

-- 30. What is the gender distribution per branch?

SELECT branch, gender, COUNT(*) AS gen_ct 
FROM sales 
GROUP BY branch, gender 
ORDER BY branch;

-- 31. Which time of the day do customers give most ratings?

SELECT time_of_day, ROUND(AVG(rating), 2) AS avg_rat 
FROM sales 
GROUP BY time_of_day;

-- 32. Which time of the day do customers give most ratings per branch?

SELECT time_of_day, ROUND(AVG(rating), 2) AS avg_rate, branch 
FROM sales 
GROUP BY time_of_day, branch 
ORDER BY branch;

-- 33. Which day of the week has the best average ratings?

SELECT day_name, AVG(rating) AS avg_rate 
FROM sales 
GROUP BY day_name 
ORDER BY avg_rate DESC;

-- 34. Which day of the week has the best average ratings per branch?

SELECT day_name, AVG(rating) AS avg_rate 
FROM sales 
GROUP BY day_name 
ORDER BY avg_rate DESC;
